import{_ as a,c as e,o as t,Q as r}from"./chunks/framework.e7dbb61d.js";const m=JSON.parse('{"title":"这里是个人的博客，用于个人技术的沉淀","description":"","frontmatter":{},"headers":[],"relativePath":"guide/index.md","lastUpdated":1678693564000}'),i={name:"guide/index.md"},h=r('<h1 id="这里是个人的博客-用于个人技术的沉淀" tabindex="-1">这里是个人的博客，用于个人技术的沉淀 <a class="header-anchor" href="#这里是个人的博客-用于个人技术的沉淀" aria-label="Permalink to &quot;这里是个人的博客，用于个人技术的沉淀&quot;">​</a></h1><h2 id="php" tabindex="-1">PHP <a class="header-anchor" href="#php" aria-label="Permalink to &quot;PHP&quot;">​</a></h2><p>本人曾经从事过PHP相关开发，这里有部分PHP相关技术和实用工具类的总结。<a href="./../php/index.html">前往</a></p><h2 id="vue" tabindex="-1">VUE <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;VUE&quot;">​</a></h2><p>目前的主攻方向，主要以VUE2.0为基础，VUE3.0为接触时，以后会慢慢向3.0过渡。<a href="./../vue/index.html">前往</a></p><h2 id="uni-app" tabindex="-1">uni-app <a class="header-anchor" href="#uni-app" aria-label="Permalink to &quot;uni-app&quot;">​</a></h2><p>作为一个跨端的解决方案，uniapp无疑是合格的，但是其内核的耦合性过大，BUG众多，效果低效，使得使用时有那么程度的不痛快。小程序方面还可以用，跨端以后可能会向着Flutter方向努力。<a href="./../uniapp/index.html">前往</a></p><h2 id="node-js" tabindex="-1">NODE.js <a class="header-anchor" href="#node-js" aria-label="Permalink to &quot;NODE.js&quot;">​</a></h2><p>前端发展迅速，NODE已经是前端学习路上的必经之路，将来向着前端全栈方向努力的必备技能，这里也有部分关于NODE.js的坑与得。<a href="./../node/index.html">前往</a></p><h2 id="javascript" tabindex="-1">JAVASCRIPT <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JAVASCRIPT&quot;">​</a></h2><p>这里会存一些封装的，比较好用的部分纯js封装类。<a href="./../javascript/index.html">前往</a></p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><p>一些三方的库会用到的技巧，包括echarts，light-weight-charts等</p>',13),n=[h];function o(d,s,p,l,c,u){return t(),e("div",null,n)}const P=a(i,[["render",o]]);export{m as __pageData,P as default};
